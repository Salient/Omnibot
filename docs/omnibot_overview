*******************************************************************************
		
		OmniBot Core

*******************************************************************************

This is the core functionality of OmniBot, including command interpreting 
and the plugin framework.  The actual IRC interface is outside the scope of 
this file, as that is all handled in the MiniBot framework.

------main.cpp------

This file contains the bot's main function.  It establishes the Minibot IRC 
connection, which instantiates the OmniBot.  Afterwards, it repeatedly blocks on stdin 
waiting for a quit message because I wasn't quite sure how else to keep main 
from exiting while the bot was running. Everything but the initialization is 
event driven from other threads.

-----OmniBot-----

This class handles all of OmniBot's high level functions, including various 
commands for the program as a whole, such as joining/leaving channels, loading/
unloading plugins etc.  It also handles connection errors.

------PluginFactory------

This is an abstract singleton class accessed by the PluginFactory::instance()
function. It provides a uniform interface for implementation specific subclasses
and abstracts them away for the plugin manager.  This is done for future support
of both cross platform builds and dynamic class loading, which is platform 
specific.

------LinuxPluginFactory------

In the future this will provide dynamic class loading of plugins on the linux 
platform.

------PluginManager------

This class manages the loading and unloading of plugins, as well as permissions and 
utilities for those plugins.

------PluginUtils------

This provides a filtered interface for the plugin to interact with the outside 
world. The plugin must access all functions like the IRC communications, 
interplugin communications, etc through this object. PluginUtils instances are
created by the Plugin manager based on the recorded permissions for a given plugin
and are passed to the plugin on load.  From the plugins perspective this class is
immutable.  This class *can deny* access to certain services based on a plugin's
permissions.

------PluginAttrs------

This class is used to represent the permissions configuration of a given plugin
like the mode bits on an inode, or the security attribute structs in the win32 API.

------OmniPlugin------

This class is an abstract class that defines the interface that an plugin must
implement. It also abstracts all the thread handling involved in the plugin's 
message processing away. It has a private thread instance and a private class
OmniPlugin::PluginRunner that implements OmniThreadedClass. On receipt of a 
message, the plugin manager will call the static function OmniPlugin::passMessage()
passing each of the loaded plugins, and a copy of the ircMessage object as arguments
This function then wraps the two up in a PluginRunner instance and passes it to
the plugin's worker thread. The RunA() function in the Runner is called and passes
the message to the plugin.  Once the plugin finishes processing the message the 
PluginRunner instance deletes itself, and the thread idles waiting for the next task

***Need to come up with a better way for deleting PluginRunner instances when they
   finish. As it sits now if a thread is released with pending tasks, the ThreadPool
   will delete the only pointers to these tasks and leave orphaned objects in memory.
